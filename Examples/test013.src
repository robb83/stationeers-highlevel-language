var vm = Device(StructureVendingMachine, d0);
var stacker = Device(StructureStacker, d1);
var sorter = Device(StructureSorter, d2);
var centrifuges = Device(StructureCentrifuge, Maximum);

sorter.Mode = 2;
sorter.ClearMemory = 1;
stacker.Mode = 0;
stacker.ClearMemory = 1;
stacker.Setting = 50;
vm.ClearMemory = 1;

loop
{
	var slot = 2;
	while (slot < 102)
	{
		if (vm[slot].Occupied)
		{
			var count = 1;
			var hash = vm[slot].OccupantHash;
			var quantity = vm[slot].Quantity;
			var s = slot + 1;
			while ( s < 102)
			{
				if (vm[s].Occupied && vm[s].OccupantHash == hash)
				{
					count = count + 1;
					quantity = quantity + vm[s].Quantity;
				}

				s = s + 1;
			}

			# extract
			while (count > 1 || quantity >= 50)
			{
				vm.RequestHash = hash;
				yield();

				# sorter
				while (sorter[0].Occupied)
				{
					sorter.Output = sorter[0].Quantity >= 50;
					yield();
				}

				count = count - 1;
			}
		}

		slot = slot + 1;
	}

	# open centrifuges if needed
	if (centrifuges.Error > 0 || centrifuges.Reagents >= 180)
	{
		loop
		{
			centrifuges.Open = 1;
			yield();

			if (centrifuges.Reagents <= 1)
			{
				break;
			}
		}
	}
	centrifuges.Open = 0;

	# sorter
	while (sorter[0].Occupied)
	{
		sorter.Output = sorter[0].Quantity >= 50;
		yield();
	}
}